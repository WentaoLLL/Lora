<!DOCTYPE html>
<html>

<head>
    <%- include('./layout/head') %>
</head>
<style>
    table tbody {
        display: block;
        max-height: 300px;
        overflow-y: scroll;
    }

    table thead,
    table tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
    }
</style>

<body>
    <div id="app" class="wrapper">
        <!-- Sidebar  -->
        <%- include('./layout/userMenu') %>

        <!-- Page Content  -->
        <div id="content">

            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="container-fluid">

                    <button type="button" id="sidebarCollapse" class="btn btn-info">
                        <i class="fas fa-align-left"></i>
                        <span>Menü</span>
                    </button>
                </div>
            </nav>
            <div class="container-fluid">
                <div>
                     <img src="/images/city.png"  style="height:330px"/>
                 </div>
                    <h5 class="bg-secondary text-white text-center">
                     Datei Charts
                    </h5>
                    
                <ul class="list-unstyled CTAs">
                     <li>
                        <a href="http://85.214.129.125:4000/" class="download">Parkplätzssysteme</a>
                     </li>
                </ul>
                 
                <ul class="list-unstyled CTAs">
                    <li>
                        <a href="/secured/dashboard" class="download">Aktualisierung</a>
                    </li>
                </ul>
                </div>
            <ul >
            </ul >

            <div>
                <div style="width: 70%;margin-bottom: 20px;display: inline-block;vertical-align: top;margin-top: -20px;">
                    <canvas id="chartCanvas" height="150px" style="display:block;height:200px"
                        class="chartjs-render-monitor"></canvas>
                    <div style="text-align:center; margin-top: 20px;">
                        <!--button
                            style="margin-right: 20px;border:0;border-radius: 4px;height: 30px;width:70px;background-color: #87CEFA;"
                            onclick="ByDay()">Tag</button-->
                        <button
                            style="margin-right: 20px;border:0;border-radius: 4px;height: 30px;width:70px;background-color: #87CEFA;"
                            onclick="ByHour()">Tag</button>
                        <button
                            style="margin-right: 20px;border:0;border-radius: 4px;background-color:gray;height: 30px;width:70px;background-color: #87CEFA;"
                            onclick="ByMonth()">Monat</button>
                        <button
                            style="border:0;border-radius: 4px;background-color:gray;height: 30px;width:70px;background-color: #87CEFA;margin-right: 100px;"
                            onclick="ByYear()">Jahr</button>
                        <input type="text" data-range="true" data-multiple-dates-separator=" - " data-language="en" class="datepicker-here" style="width:200px"/>
                        <button
                            style="margin-right: 20px;border:0;border-radius: 4px;height: 30px;width:70px;background-color: #87CEFA;"
                            onclick="BySearch()">Suchen</button>
                    </div>
                </div>
                <div style="display: inline-block;width: 28%;vertical-align: top;">
                    <canvas id="totalCanvas" height="243px" style="display:block;height:200px;margin-top: -20px;"
                        class="chartjs-render-monitor"></canvas>
                    <div style="text-align:center"><button style="display: hidden;border:0"></button></div>
                </div>
            </div>

            <div>
                <div class="water_pie" style="display: inline-block;width: 24%;vertical-align: top;">
                    <canvas id="waterPieCanvas" height="300px" style="display:block;height:300px"
                        class="chartjs-render-monitor"></canvas>
                </div>
                <div class="electron_pie" style="display: inline-block;width: 25%;vertical-align: top;">
                    <canvas id="electronPieCanvas" height="300px" style="display:block;height:300px"
                        class="chartjs-render-monitor"></canvas>
                </div>
                <div class="gas_pie"
                    style="display: inline-block;width: 24%;vertical-align: top;">
                    <canvas id="gasPieCanvas" height="300px" style="display:block;height:300px"
                        class="chartjs-render-monitor"></canvas>
                </div>
                <div class="heat_pie"
                    style="display: inline-block;width: 25%;vertical-align: top;">
                    <canvas id="heatPieCanvas" height="300px" style="display:block;height:300px"
                        class="chartjs-render-monitor"></canvas>
                </div>
            </div>



            <div class="dropdown">

                <h5 class="bg-secondary text-white text-center">
                    Datei Liste <span class="caret"></span>
                </h5>
                <h6 class="bg-secondary text-white text-center" id="dLabel" role="button" data-toggle="dropdown" data-target="#" href="#">
                    Hier kicken,um die Datei Liste zu schauen! <span class="caret"></span>
                </h6>

             <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">

            <table class="table">
                <thead class="thead-light" style="text-align: center;">
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">WIE</th>
                        <th scope="col">Objekt</th>
                        <th scope="col">VE</th>
                        <th scope="col">Elemente</th>
                        <th scope="col">Type</th>
                        <th scope="col">Zähler ID</th>
                        <th scope="col">Zahl</th>
                        <th scope="col">Datum</th>
                    </tr>
                </thead>
                <thead class="thead-light" style="text-align: center;">
                    <tr>
                        <th scope="col" >
                            <!-- <input style="width: 100%;" v-model="userid" @change="onChange('id')" type="text" placeholder="Record ID"> -->
                        </th>
                        <th scope="col">
                            <input style="width: 100%;" v-model="wie" type="text"></th>
                        <th scope="col">
                            <input style="width: 100%;" v-model="obj" type="text">
                        </th>
                        <th scope="col">
                            <input style="width: 100%;" v-model="ve" type="text">
                        </th>
                        <th scope="col">
                            <input style="width: 100%;" v-model="ei" type="text">
                        </th>
                        <th scope="col">
                            <input style="width: 100%;" v-model="type" type="text">
                        </th>
                        <th scope="col">
                            <input style="width: 100%;" v-model="deviceid" type="text">
                        </th>
                        <th scope="col"></th>
                        <th scope="col"><input v-model="date" style="width: 100%;" @change="onChange('date')"
                                type="text" placeholder="TT/MM/JJJJ"></th>
                    </tr>
                </thead>
                <tbody style="text-align: center;">

                    <tr v-for="(d,index ) in displayData" :key="index">
                        <th scope="row" style="color: rgb(17, 169, 240);"><a
                                :href="'/secured/user/dashboard/data/'+d._id">Einzelheiten</a></th>
                        <th>{{d.wie}}</th>
                        <td>{{d.obj}}</td>
                        <td>{{d.ve}}</td>
                        <td>{{d.ei}}</td>
                        <td>{{types[d.type-1]}}</td>
                        <td>{{d.deviceid}}</td>
                        <td>{{d.value}}</td>
                        <td>{{getFormattedDate(d.time)}}</td>
                    </tr>

                </tbody>
            </table>
             </ul>

            </div>

        </div>
    </div>

    <%- include('./layout/footer') %>

    <script>
        var content, config, pieConfig;
        var dates;
        new Vue({
            el: '#app',
            data: {
                userData: [],
                displayData: [],
                wie: '',
                date: '',
                obj: '',
                ve: '',
                ei: '',
                type: '',
                deviceid: '',
                types: ['Wasser [m^3]', 'Storm [kW/h]', 'Gas [m^3]', 'Heizung [m^3]']
            },
            async mounted() {
                let response = await fetch('/secured/api/user/data');
                if (response.ok) {
                    let r = await response.json();
                    this.userData = r.history;
                    this.user = r.user;
                    this.displayData = [...this.userData];
                    if (r.data) {
                        content = r.data;
                        createCharts(r.data);
                        createTotalCharts(r.data)
                        createWaterPie(r.data);
                        createElectronPie(r.data);
                        createGasPie(r.data);
                        createHeatPie(r.data);
                    }
                }
            },
            methods: {
                getFormattedDate(date) {
                    date = new Date(date)
                    var year = date.getFullYear();
                    var month = (1 + date.getMonth()).toString();
                    month = month.length > 1 ? month : '0' + month;
                    var day = date.getDate().toString();
                    day = day.length > 1 ? day : '0' + day;
                    // 转换时分
                    var hour = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
                    var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();

                    return day + '/' + month + '/' + year + ' ' + hour + ':' + minutes;
                }, search() {
                    this.displayData = this.userData.filter(e => e.wie.includes(this.wie))
                    this.displayData = this.displayData.filter(e => e.obj.includes(this.obj))
                    this.displayData = this.displayData.filter(e => e.ve.includes(this.ve))
                    this.displayData = this.displayData.filter(e => e.ei.includes(this.ei))
                    if (this.deviceid !== '')
                        this.displayData = this.displayData.filter(e => e.deviceid && e.deviceid.includes(this.deviceid))
                    // console.log(this.types[e.type-1])
                    this.displayData = this.displayData.filter(e => this.types[e.type - 1].includes(this.type))
                }
            },
            watch: {
                wie: function(val) {
                    this.search();
                },
                obj: function(val) {
                    this.search();
                },
                ei: function(val) {
                    this.search();
                },
                ve: function(val) {
                    this.search();
                },
                type: function(val) {
                    this.search();
                },
                deviceid: function(val) {
                    this.search();
                },
                date: function(val) {
                    this.wie = '';
                    this.obj = '';
                    this.ve = '';
                    this.ei = '';
                    this.type = '';
                    this.displayData = this.userData.filter(e => this.getFormattedDate(e.time).includes(val))
                }
            },
        })

        window.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 112)',
            blue: 'rgb(54, 122, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };

        function createCharts(body) {
            //var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            config = {
                type: 'bar',
                data: {
                    labels: body.label_x_hour,
                    datasets: [{
                       // label: 'Wasser ( Preise: ' + body.labels['Water'] + ' )',
                        label: 'Wasser [m^3]',
                        backgroundColor: window.chartColors.blue,
                        borderColor: window.chartColors.blue,
                        data: body.water_hour,
                        fill: false,
                    }, {
                        label: 'Storm [kW/h]',
                        fill: false,
                        backgroundColor: window.chartColors.green,
                        borderColor: window.chartColors.green,
                        data: body.electricity_hour,
                    }, {
                        label: 'Gas [m^3]',
                        fill: false,
                        backgroundColor: window.chartColors.yellow,
                        borderColor: window.chartColors.yellow,
                        data: body.gas_hour,
                    }, {
                        label: 'Heizung [m^3]',
                        fill: false,
                        backgroundColor: window.chartColors.red,
                        borderColor: window.chartColors.red,
                        data: body.heat_hour,
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: "Tagesstände"
                    },
                    tooltips: {
                        mode: 'index',
                        intersect: false,
                        custom: function(tooltip) { tooltip.body && tooltip.body.map(i => {
                            var value = i.lines[0];
                            i.lines[0] = value.substr(0, value.indexOf('(')) + value.substr(value.indexOf(')')+1)
                        }) }
                    },
                    hover: {
                        mode: 'nearest',
                        intersect: true
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Datum'
                            }
                        }],
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Stände'
                            }
                        }]
                    }
                }
            };
            var ctx = document.getElementById('chartCanvas').getContext('2d');
            window.myLine = new Chart(ctx, config);
        }

        function createTotalCharts(body) {
            var color = Chart.helpers.color;
            var barChartData = {
                labels: ['Wasser(kL)', 'Storm(kW)', 'Gas(kW)', 'Heizung(kL)'],
                datasets: [{
                    label: '',
                    backgroundColor: [
                        color(window.chartColors.blue).alpha(0.5).rgbString(),
                        color(window.chartColors.green).alpha(0.5).rgbString(),
                        color(window.chartColors.yellow).alpha(0.5).rgbString(),
                        color(window.chartColors.red).alpha(0.5).rgbString(),
                    ],
                    borderColor: [
                        window.chartColors.blue,
                        window.chartColors.green,
                        window.chartColors.yellow,
                        window.chartColors.red
                    ],
                    borderWidth: 1,
                    data: [
                        body.water_total , body.electricity_total, body.gas_total, body.heat_total
                    ]
                }],
            };

            var date = new Date()
            var year = date.getFullYear();
            var month = (1 + date.getMonth()).toString();
            month = month.length > 1 ? month : '0' + month;
            var day = date.getDate().toString();
            day = day.length > 1 ? day : '0' + day;
            const datestr = day + ' / ' + month + ' / ' + year;

            var ctx = document.getElementById('totalCanvas').getContext('2d');
            window.myBar = new Chart(ctx, {
                type: 'bar',
                data: barChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top',
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Gesamte Zählen  ( ' + datestr + ' )',
                        padding: 30
                    },
                    scales: {
                        xAxes: [{
                            "ticks": { "beginAtZero": true },
                            gridLines: {
                                display: false
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true, backdropColor: "rgba(255,255,255,0)",
                                userCallback: function (value, index, values) { return ""; }
                            },
                            gridLines: { display: false }
                        }]
                    },
                    hover: { animationDuration: 0 },
                    animation: {
                        duration: 1,
                        onComplete: function () {
                            var chartInstance = this.chart,
                            ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i);
                                meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    ctx.fillText(data, bar._model.x, bar._model.y - 5);
                                });
                            });
                        }
                    }
                },
            });
         
        }

        // 饼状图公用方法，初始化数据
        function initPieData(body, title) {
                var color = Chart.helpers.color;
                var backgroundColor = [ // 背景颜色
                    color(window.chartColors.blue).alpha(0.5).rgbString(),
                    color(window.chartColors.green).alpha(0.5).rgbString(),
                    color(window.chartColors.yellow).alpha(0.5).rgbString(),
                    color(window.chartColors.red).alpha(0.5).rgbString(),
                    color(window.chartColors.orange).alpha(0.5).rgbString(),
                    color(window.chartColors.purple).alpha(0.5).rgbString(),
                ];
                var borderColor = [  // 线条颜色
                    window.chartColors.blue,
                    window.chartColors.green,
                    window.chartColors.yellow,
                    window.chartColors.red,
                    window.chartColors.orange,
                    window.chartColors.purple
                ];
                pieConfig = {  // 数据初始化
                    labels: body.labels,
                    datasets: [{
                        backgroundColor: backgroundColor.slice(0, body.labels.length),
                        borderColor: borderColor.slice(0, body.labels.length),
                        borderWidth: 1,
                        data: body.data
                    }],
                };
                return  {
                    data: pieConfig,
                    options: {
                        legend: {
                            position: 'top',
                            display: false
                        },
                        title: {
                            display: true,
                            text: title,
                            padding: 30
                        }
                    }
                }
            }

            // 饼状图 - 水
            function createWaterPie(body) {
                var ctx = document.getElementById('waterPieCanvas').getContext('2d');
                var d = initPieData(body.water_devices, 'Wasser');
                window.myWaterPie = new Chart(ctx, {
                    type: 'pie',
                    data: d.data,
                    options: d.options
                });
            }
            // 饼状图 - 电
            function createElectronPie(body) {
                var ctx = document.getElementById('electronPieCanvas').getContext('2d');
                var d = initPieData(body.electricity_devices, 'Storm');
                window.myElectronPie = new Chart(ctx, {
                    type: 'pie',
                    data: d.data,
                    options: d.options
                });
            }
            // 饼状图 - 燃
            function createGasPie(body) {
                var ctx = document.getElementById('gasPieCanvas').getContext('2d');
                var d = initPieData(body.gas_devices, 'Gas');
                window.myGasPie = new Chart(ctx, {
                    type: 'pie',
                    data: d.data,
                    options: d.options
                });
            }
            // 饼状图 - 气
            function createHeatPie(body) {
                var ctx = document.getElementById('heatPieCanvas').getContext('2d');
                var d = initPieData(body.heat_devices, 'Heizung');
                window.myheatPie = new Chart(ctx, {
                    type: 'pie',
                    data: d.data,
                    options: d.options
                });
            }

            function pieDataUpdate(type, config) {
                pieConfig.data.labels = config.labels;
                pieConfig.data.datasets[0].data = config.data;
                switch(type) {
                    case 'water':
                        window.myWaterPie.update();break;
                    case 'electricity':
                        window.myElectronPie.update();break;
                    case 'gas':
                        window.myGasPie.update();break;
                    case 'heat':
                        window.myheatPie.update();break;
                }
            }

        // 按小时
        function ByHour() {
            config.data.labels = content.label_x_hour;
            config.data.datasets[0].data = content.water_hour;
            config.data.datasets[1].data = content.electricity_hour;
            config.data.datasets[2].data = content.gas_hour;
            config.data.datasets[3].data = content.heat_hour;
            window.myLine.update()
        }
        // 按天
        function ByDay() {
            config.data.labels = content.label_x_day;
            config.data.datasets[0].data = content.water_day;
            config.data.datasets[1].data = content.electricity_day;
            config.data.datasets[2].data = content.gas_day;
            config.data.datasets[3].data = content.heat_day;
            window.myLine.update()
        }
        // 按月
        function ByMonth() {
            config.data.labels = content.label_x_month;
            config.data.datasets[0].data = content.water_month;
            config.data.datasets[1].data = content.electricity_month;
            config.data.datasets[2].data = content.gas_month;
            config.data.datasets[3].data = content.heat_month;
            window.myLine.update()
        }
        // 按年
        function ByYear() {
            config.data.labels = content.label_x_year;
            config.data.datasets[0].data = content.water_year;
            config.data.datasets[1].data = content.electricity_year;
            config.data.datasets[2].data = content.gas_year;
            config.data.datasets[3].data = content.heat_year;
            window.myLine.update()
        }

        function getFormattedDate(date, normal) {
            date = new Date(date)
            var year = date.getFullYear();
            var month = (1 + date.getMonth()).toString();
            month = month.length > 1 ? month : '0' + month;
            var day = date.getDate().toString();
            day = day.length > 1 ? day : '0' + day;
            if (normal) return year + '-' + month + '-' + day;
            return day + '/' + month + '/' + year;
        }
        
        async function BySearch() {
            if (dates) {
                var start = dates[0] && getFormattedDate(dates[0], true);
                var end = dates[1] && getFormattedDate(dates[1], true) || '';
                let response = await fetch('/secured/api/user/data/date?start='+start+'&end='+end);
                if (response.ok) {
                    let r = await response.json();
                    console.log(r)
                    if(r.data.label_x_day.length == 0) {
                        r.data.label_x_day.push(getFormattedDate(dates[0], false));
                        r.data.label_x_day.push((end && getFormattedDate(dates[1], false)) || getFormattedDate(dates[0], false));
                        r.data.water_day = [0, 0];
                        r.data.electricity_day = [0, 0];
                        r.data.gas_day = [0, 0];
                        r.data.heat_day = [0, 0];
                    }
                    if(r.data.label_x_day.length == 1) {
                        r.data.label_x_day.push((end && getFormattedDate(dates[1], false)) || getFormattedDate(dates[0], false));
                        r.data.water_day.push(0);
                        r.data.electricity_day.push(0);
                        r.data.gas_day.push(0);
                        r.data.heat_day.push(0);
                    }
                    config.data.labels = r.data.label_x_day;
                    config.data.datasets[0].data = r.data.water_day;
                    config.data.datasets[1].data = r.data.electricity_day;
                    config.data.datasets[2].data = r.data.gas_day;
                    config.data.datasets[3].data = r.data.heat_day;
                    window.myLine.update()
                }
            } else {
                alert('Bitte Datei auswählen!')
            }
        }


        $(".datepicker-here").datepicker({
            dateFormat: 'dd/mm/yyyy',
            onSelect: function onSelect(fd, date) {
                var start = date[0];
                var end = date[1];
                dates = [ Date.parse(start), Date.parse(end) ]
            }
        });
    </script>
</body>

</html>
