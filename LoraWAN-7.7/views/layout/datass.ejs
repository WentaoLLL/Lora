<!DOCTYPE html>
<html>





    <script>
        var content, config;
        var dates;
        new Vue({
            el: '#app',
            data: {
                userData: [],
                displayData: [],
                wie: '',
                date: '',
                obj: '',
                ve: '',
                ei: '',
                type: '',
                deviceid: '',
                types: ['Wasser [m^3]', 'Storm [kW/h]', 'Gas [m^3]', 'Heizung [m^3]']
            },
            async mounted() {
                let response = await fetch('/secured/api/user/data');
                if (response.ok) {
                    let r = await response.json();
                    console.log(r.data)
                    this.userData = r.history;
                    this.user = r.user;
                    this.displayData = [...this.userData];
                    if (r.data) {
                        content = r.data;
                        createCharts(r.data);
                        createTotalCharts(r.data)
                    }
                }
            },
            methods: {
                getFormattedDate(date) {
                    date = new Date(date)
                    var year = date.getFullYear();
                    var month = (1 + date.getMonth()).toString();
                    month = month.length > 1 ? month : '0' + month;
                    var day = date.getDate().toString();
                    day = day.length > 1 ? day : '0' + day;
                    return day + '/' + month + '/' + year;
                }, search() {
                    this.displayData = this.userData.filter(e => e.wie.includes(this.wie))
                    this.displayData = this.displayData.filter(e => e.obj.includes(this.obj))
                    this.displayData = this.displayData.filter(e => e.ve.includes(this.ve))
                    this.displayData = this.displayData.filter(e => e.ei.includes(this.ei))
                    if (this.deviceid !== '')
                        this.displayData = this.displayData.filter(e => e.deviceid && e.deviceid.includes(this.deviceid))
                    // console.log(this.types[e.type-1])
                    this.displayData = this.displayData.filter(e => this.types[e.type - 1].includes(this.type))
                }
            },
            watch: {
                wie: function(val) {
                    this.search();
                },
                obj: function(val) {
                    this.search();
                },
                ei: function(val) {
                    this.search();
                },
                ve: function(val) {
                    this.search();
                },
                type: function(val) {
                    this.search();
                },
                deviceid: function(val) {
                    this.search();
                },
                date: function(val) {
                    this.wie = '';
                    this.obj = '';
                    this.ve = '';
                    this.ei = '';
                    this.type = '';
                    this.displayData = this.userData.filter(e => this.getFormattedDate(e.time).includes(val))
                }
            },
        })

        window.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 112)',
            blue: 'rgb(54, 122, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };

        function createCharts(body) {
            //var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            config = {
                type: 'bar',
                data: {
                    labels: body.label_x_day,
                    datasets: [{
                       // label: 'Wasser ( Preise: ' + body.labels['Water'] + ' )',
                        label: 'Wasser [m^3]',
                        backgroundColor: window.chartColors.blue,
                        borderColor: window.chartColors.blue,
                        data: body.water_day,
                        fill: false,
                    }, {
                        label: 'Storm [kW/h]',
                        fill: false,
                        backgroundColor: window.chartColors.green,
                        borderColor: window.chartColors.green,
                        data: body.electricity_day,
                    }, {
                        label: 'Gas [m^3]',
                        fill: false,
                        backgroundColor: window.chartColors.yellow,
                        borderColor: window.chartColors.yellow,
                        data: body.gas_day,
                    }, {
                        label: 'Heizung [m^3]',
                        fill: false,
                        backgroundColor: window.chartColors.red,
                        borderColor: window.chartColors.red,
                        data: body.heat_day,
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: "Tagesstände"
                    },
                    tooltips: {
                        mode: 'index',
                        intersect: false,
                        custom: function(tooltip) { tooltip.body && tooltip.body.map(i => {
                            var value = i.lines[0];
                            i.lines[0] = value.substr(0, value.indexOf('(')) + value.substr(value.indexOf(')')+1)
                        }) }
                    },
                    hover: {
                        mode: 'nearest',
                        intersect: true
                    },
                    scales: {
                        xAxes: [{
                            display: false,
                            scaleLabel: {
                                display: false,
                                labelString: 'Datum'
                            }
                        }],
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Stände'
                            }
                        }]
                    }
                }
            };
            var ctx = document.getElementById('chartCanvas').getContext('2d');
            window.myLine = new Chart(ctx, config);
        }

        function createTotalCharts(body) {
            var color = Chart.helpers.color;
            var barChartData = {
                labels: ['Wasser(kL)', 'Storm(kW)', 'Gas(kW)', 'Heizung(kL)'],
                datasets: [{
                    label: '',
                    backgroundColor: [
                        color(window.chartColors.blue).alpha(0.5).rgbString(),
                        color(window.chartColors.green).alpha(0.5).rgbString(),
                        color(window.chartColors.yellow).alpha(0.5).rgbString(),
                        color(window.chartColors.red).alpha(0.5).rgbString(),
                    ],
                    borderColor: [
                        window.chartColors.blue,
                        window.chartColors.green,
                        window.chartColors.yellow,
                        window.chartColors.red
                    ],
                    borderWidth: 1,
                    data: [
                        body.water_total , body.electricity_total, body.gas_total, body.heat_total
                    ]
                }],
            };

            var date = new Date()
            var year = date.getFullYear();
            var month = (1 + date.getMonth()).toString();
            month = month.length > 1 ? month : '0' + month;
            var day = date.getDate().toString();
            day = day.length > 1 ? day : '0' + day;
            const datestr = day + ' / ' + month + ' / ' + year;

            var ctx = document.getElementById('totalCanvas').getContext('2d');
            window.myBar = new Chart(ctx, {
                type: 'bar',
                data: barChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top',
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Gesamte Zählen  ( ' + datestr + ' )',
                        padding: 30
                    },
                    scales: {
                        xAxes: [{
                            "ticks": { "beginAtZero": true },
                            gridLines: {
                                display: false
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true, backdropColor: "rgba(255,255,255,0)",
                                userCallback: function (value, index, values) {
                                    return "";
                                }
                            },
                            gridLines: {
                                display: false
                            }
                        }]
                    },
                    hover: { animationDuration: 0 },
                    animation: {

                        duration: 1,

                        onComplete: function () {

                            var chartInstance = this.chart,

                                ctx = chartInstance.ctx;

                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);

                            ctx.textAlign = 'center';

                            ctx.textBaseline = 'bottom';



                            this.data.datasets.forEach(function (dataset, i) {

                                var meta = chartInstance.controller.getDatasetMeta(i);

                                meta.data.forEach(function (bar, index) {

                                    var data = dataset.data[index];

                                    ctx.fillText(data, bar._model.x, bar._model.y - 5);

                                });

                            });

                        }

                    }
                },

            });
            
        }

        function ByDay() {
            config.data.labels = content.label_x_day;
            config.data.datasets[0].data = content.water_day;
            config.data.datasets[1].data = content.electricity_day;
            config.data.datasets[2].data = content.gas_day;
            config.data.datasets[3].data = content.heat_day;
            window.myLine.update()
        }

        function ByMonth() {
            config.data.labels = content.label_x_month;
            config.data.datasets[0].data = content.water_month;
            config.data.datasets[1].data = content.electricity_month;
            config.data.datasets[2].data = content.gas_month;
            config.data.datasets[3].data = content.heat_month;
            window.myLine.update()
        }

        function ByYear() {
            config.data.labels = content.label_x_year;
            config.data.datasets[0].data = content.water_year;
            config.data.datasets[1].data = content.electricity_year;
            config.data.datasets[2].data = content.gas_year;
            config.data.datasets[3].data = content.heat_year;
            window.myLine.update()
        }

        function getFormattedDate(date, normal) {
            date = new Date(date)
            var year = date.getFullYear();
            var month = (1 + date.getMonth()).toString();
            month = month.length > 1 ? month : '0' + month;
            var day = date.getDate().toString();
            day = day.length > 1 ? day : '0' + day;
            if (normal) return year + '-' + month + '-' + day;
            return day + '/' + month + '/' + year;
        }
        
        async function BySearch() {
            if (dates) {
                var start = dates[0] && getFormattedDate(dates[0], true);
                var end = dates[1] && getFormattedDate(dates[1], true) || '';
                let response = await fetch('/secured/api/user/data/date?start='+start+'&end='+end);
                if (response.ok) {
                    let r = await response.json();
                    console.log(r)
                    if(r.data.label_x_day.length == 0) {
                        r.data.label_x_day.push(getFormattedDate(dates[0], false));
                        r.data.label_x_day.push((end && getFormattedDate(dates[1], false)) || getFormattedDate(dates[0], false));
                        r.data.water_day = [0, 0];
                        r.data.electricity_day = [0, 0];
                        r.data.gas_day = [0, 0];
                        r.data.heat_day = [0, 0];
                    }
                    if(r.data.label_x_day.length == 1) {
                        r.data.label_x_day.push((end && getFormattedDate(dates[1], false)) || getFormattedDate(dates[0], false));
                        r.data.water_day.push(0);
                        r.data.electricity_day.push(0);
                        r.data.gas_day.push(0);
                        r.data.heat_day.push(0);
                    }
                    config.data.labels = r.data.label_x_day;
                    config.data.datasets[0].data = r.data.water_day;
                    config.data.datasets[1].data = r.data.electricity_day;
                    config.data.datasets[2].data = r.data.gas_day;
                    config.data.datasets[3].data = r.data.heat_day;
                    window.myLine.update()
                }
            } else {
                alert('Bitte Datei auswählen!')
            }
        }


        $(".datepicker-here").datepicker({
            dateFormat: 'dd/mm/yyyy',
            onSelect: function onSelect(fd, date) {
                var start = date[0];
                var end = date[1];
                dates = [ Date.parse(start), Date.parse(end) ]
            }
        });
    </script>
</body>

</html>